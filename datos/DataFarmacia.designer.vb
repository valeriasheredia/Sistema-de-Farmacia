'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Farmacia")>  _
Partial Public Class DataFarmacia
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertBoleta(instance As Boleta)
    End Sub
  Partial Private Sub UpdateBoleta(instance As Boleta)
    End Sub
  Partial Private Sub DeleteBoleta(instance As Boleta)
    End Sub
  Partial Private Sub InsertUsuario(instance As Usuario)
    End Sub
  Partial Private Sub UpdateUsuario(instance As Usuario)
    End Sub
  Partial Private Sub DeleteUsuario(instance As Usuario)
    End Sub
  Partial Private Sub InsertCategoria(instance As Categoria)
    End Sub
  Partial Private Sub UpdateCategoria(instance As Categoria)
    End Sub
  Partial Private Sub DeleteCategoria(instance As Categoria)
    End Sub
  Partial Private Sub InsertClientes(instance As Clientes)
    End Sub
  Partial Private Sub UpdateClientes(instance As Clientes)
    End Sub
  Partial Private Sub DeleteClientes(instance As Clientes)
    End Sub
  Partial Private Sub InsertDetalleOrdenPedido(instance As DetalleOrdenPedido)
    End Sub
  Partial Private Sub UpdateDetalleOrdenPedido(instance As DetalleOrdenPedido)
    End Sub
  Partial Private Sub DeleteDetalleOrdenPedido(instance As DetalleOrdenPedido)
    End Sub
  Partial Private Sub InsertEmpleado(instance As Empleado)
    End Sub
  Partial Private Sub UpdateEmpleado(instance As Empleado)
    End Sub
  Partial Private Sub DeleteEmpleado(instance As Empleado)
    End Sub
  Partial Private Sub InsertOrdenPedido(instance As OrdenPedido)
    End Sub
  Partial Private Sub UpdateOrdenPedido(instance As OrdenPedido)
    End Sub
  Partial Private Sub DeleteOrdenPedido(instance As OrdenPedido)
    End Sub
  Partial Private Sub InsertPresentacion(instance As Presentacion)
    End Sub
  Partial Private Sub UpdatePresentacion(instance As Presentacion)
    End Sub
  Partial Private Sub DeletePresentacion(instance As Presentacion)
    End Sub
  Partial Private Sub InsertProducto(instance As Producto)
    End Sub
  Partial Private Sub UpdateProducto(instance As Producto)
    End Sub
  Partial Private Sub DeleteProducto(instance As Producto)
    End Sub
  Partial Private Sub InsertProveedor(instance As Proveedor)
    End Sub
  Partial Private Sub UpdateProveedor(instance As Proveedor)
    End Sub
  Partial Private Sub DeleteProveedor(instance As Proveedor)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Sistema_de_Farmacia.My.MySettings.Default.FarmaciaConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Boleta() As System.Data.Linq.Table(Of Boleta)
		Get
			Return Me.GetTable(Of Boleta)
		End Get
	End Property
	
	Public ReadOnly Property Usuario() As System.Data.Linq.Table(Of Usuario)
		Get
			Return Me.GetTable(Of Usuario)
		End Get
	End Property
	
	Public ReadOnly Property Categoria() As System.Data.Linq.Table(Of Categoria)
		Get
			Return Me.GetTable(Of Categoria)
		End Get
	End Property
	
	Public ReadOnly Property Clientes() As System.Data.Linq.Table(Of Clientes)
		Get
			Return Me.GetTable(Of Clientes)
		End Get
	End Property
	
	Public ReadOnly Property DetalleOrdenPedido() As System.Data.Linq.Table(Of DetalleOrdenPedido)
		Get
			Return Me.GetTable(Of DetalleOrdenPedido)
		End Get
	End Property
	
	Public ReadOnly Property Empleado() As System.Data.Linq.Table(Of Empleado)
		Get
			Return Me.GetTable(Of Empleado)
		End Get
	End Property
	
	Public ReadOnly Property OrdenPedido() As System.Data.Linq.Table(Of OrdenPedido)
		Get
			Return Me.GetTable(Of OrdenPedido)
		End Get
	End Property
	
	Public ReadOnly Property Presentacion() As System.Data.Linq.Table(Of Presentacion)
		Get
			Return Me.GetTable(Of Presentacion)
		End Get
	End Property
	
	Public ReadOnly Property Producto() As System.Data.Linq.Table(Of Producto)
		Get
			Return Me.GetTable(Of Producto)
		End Get
	End Property
	
	Public ReadOnly Property Proveedor() As System.Data.Linq.Table(Of Proveedor)
		Get
			Return Me.GetTable(Of Proveedor)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Boleta")>  _
Partial Public Class Boleta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_boleta As Integer
	
	Private _fecha As Date
	
	Private _id_empleado As Integer
	
	Private _id_cliente As Integer
	
	Private _id_orden_pedido As Integer
	
	Private _subtotal As String
	
	Private _descuento As String
	
	Private _total As String
	
	Private _Clientes As EntityRef(Of Clientes)
	
	Private _Empleado As EntityRef(Of Empleado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_boletaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_boletaChanged()
    End Sub
    Partial Private Sub Onfecha_boletaChanging(value As Date)
    End Sub
    Partial Private Sub Onfecha_boletaChanged()
    End Sub
    Partial Private Sub Onid_empleadoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_empleadoChanged()
    End Sub
    Partial Private Sub Onid_clienteChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_clienteChanged()
    End Sub
    Partial Private Sub Onid_orden_pedidoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_orden_pedidoChanged()
    End Sub
    Partial Private Sub OnsubtotalChanging(value As String)
    End Sub
    Partial Private Sub OnsubtotalChanged()
    End Sub
    Partial Private Sub OndescuentoChanging(value As String)
    End Sub
    Partial Private Sub OndescuentoChanged()
    End Sub
    Partial Private Sub OntotalChanging(value As String)
    End Sub
    Partial Private Sub OntotalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Clientes = CType(Nothing, EntityRef(Of Clientes))
		Me._Empleado = CType(Nothing, EntityRef(Of Empleado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_boleta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_boleta() As Integer
		Get
			Return Me._id_boleta
		End Get
		Set
			If ((Me._id_boleta = value)  _
						= false) Then
				Me.Onid_boletaChanging(value)
				Me.SendPropertyChanging
				Me._id_boleta = value
				Me.SendPropertyChanged("id_boleta")
				Me.Onid_boletaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="Date NOT NULL")>  _
	Public Property fecha_boleta() As Date
		Get
			Return Me._fecha
		End Get
		Set
			If ((Me._fecha = value)  _
						= false) Then
				Me.Onfecha_boletaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha_boleta")
				Me.Onfecha_boletaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_empleado", DbType:="Int NOT NULL")>  _
	Public Property id_empleado() As Integer
		Get
			Return Me._id_empleado
		End Get
		Set
			If ((Me._id_empleado = value)  _
						= false) Then
				If Me._Empleado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_empleadoChanging(value)
				Me.SendPropertyChanging
				Me._id_empleado = value
				Me.SendPropertyChanged("id_empleado")
				Me.Onid_empleadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_cliente", DbType:="Int NOT NULL")>  _
	Public Property id_cliente() As Integer
		Get
			Return Me._id_cliente
		End Get
		Set
			If ((Me._id_cliente = value)  _
						= false) Then
				If Me._Clientes.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_clienteChanging(value)
				Me.SendPropertyChanging
				Me._id_cliente = value
				Me.SendPropertyChanged("id_cliente")
				Me.Onid_clienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_orden_pedido", DbType:="Int NOT NULL")>  _
	Public Property id_orden_pedido() As Integer
		Get
			Return Me._id_orden_pedido
		End Get
		Set
			If ((Me._id_orden_pedido = value)  _
						= false) Then
				Me.Onid_orden_pedidoChanging(value)
				Me.SendPropertyChanging
				Me._id_orden_pedido = value
				Me.SendPropertyChanged("id_orden_pedido")
				Me.Onid_orden_pedidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subtotal", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property subtotal() As String
		Get
			Return Me._subtotal
		End Get
		Set
			If (String.Equals(Me._subtotal, value) = false) Then
				Me.OnsubtotalChanging(value)
				Me.SendPropertyChanging
				Me._subtotal = value
				Me.SendPropertyChanged("subtotal")
				Me.OnsubtotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descuento", DbType:="VarChar(10)")>  _
	Public Property descuento() As String
		Get
			Return Me._descuento
		End Get
		Set
			If (String.Equals(Me._descuento, value) = false) Then
				Me.OndescuentoChanging(value)
				Me.SendPropertyChanging
				Me._descuento = value
				Me.SendPropertyChanged("descuento")
				Me.OndescuentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property total() As String
		Get
			Return Me._total
		End Get
		Set
			If (String.Equals(Me._total, value) = false) Then
				Me.OntotalChanging(value)
				Me.SendPropertyChanging
				Me._total = value
				Me.SendPropertyChanged("total")
				Me.OntotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Clientes_Boleta", Storage:="_Clientes", ThisKey:="id_cliente", OtherKey:="id_cliente", IsForeignKey:=true)>  _
	Public Property Clientes() As Clientes
		Get
			Return Me._Clientes.Entity
		End Get
		Set
			Dim previousValue As Clientes = Me._Clientes.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Clientes.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Clientes.Entity = Nothing
					previousValue.Boleta.Remove(Me)
				End If
				Me._Clientes.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Boleta.Add(Me)
					Me._id_cliente = value.id_cliente
				Else
					Me._id_cliente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Clientes")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empleado_Boleta", Storage:="_Empleado", ThisKey:="id_empleado", OtherKey:="id_empleado", IsForeignKey:=true)>  _
	Public Property Empleado() As Empleado
		Get
			Return Me._Empleado.Entity
		End Get
		Set
			Dim previousValue As Empleado = Me._Empleado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Empleado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Empleado.Entity = Nothing
					previousValue.Boleta.Remove(Me)
				End If
				Me._Empleado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Boleta.Add(Me)
					Me._id_empleado = value.id_empleado
				Else
					Me._id_empleado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Empleado")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Usuario")>  _
Partial Public Class Usuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_usuario As Integer
	
	Private _perfil_usuario As String
	
	Private _nombre_usuario As String
	
	Private _contraseña As String
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_usuarioChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_usuarioChanged()
    End Sub
    Partial Private Sub Onperfil_usuarioChanging(value As String)
    End Sub
    Partial Private Sub Onperfil_usuarioChanged()
    End Sub
    Partial Private Sub Onnombre_usuarioChanging(value As String)
    End Sub
    Partial Private Sub Onnombre_usuarioChanged()
    End Sub
    Partial Private Sub Oncontraseña_usuarioChanging(value As String)
    End Sub
    Partial Private Sub Oncontraseña_usuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_usuario", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_usuario() As Integer
		Get
			Return Me._id_usuario
		End Get
		Set
			If ((Me._id_usuario = value)  _
						= false) Then
				Me.Onid_usuarioChanging(value)
				Me.SendPropertyChanging
				Me._id_usuario = value
				Me.SendPropertyChanged("id_usuario")
				Me.Onid_usuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_perfil_usuario", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property perfil_usuario() As String
		Get
			Return Me._perfil_usuario
		End Get
		Set
			If (String.Equals(Me._perfil_usuario, value) = false) Then
				Me.Onperfil_usuarioChanging(value)
				Me.SendPropertyChanging
				Me._perfil_usuario = value
				Me.SendPropertyChanged("perfil_usuario")
				Me.Onperfil_usuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre_usuario", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property nombre_usuario() As String
		Get
			Return Me._nombre_usuario
		End Get
		Set
			If (String.Equals(Me._nombre_usuario, value) = false) Then
				Me.Onnombre_usuarioChanging(value)
				Me.SendPropertyChanging
				Me._nombre_usuario = value
				Me.SendPropertyChanged("nombre_usuario")
				Me.Onnombre_usuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contraseña", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property contraseña_usuario() As String
		Get
			Return Me._contraseña
		End Get
		Set
			If (String.Equals(Me._contraseña, value) = false) Then
				Me.Oncontraseña_usuarioChanging(value)
				Me.SendPropertyChanging
				Me._contraseña = value
				Me.SendPropertyChanged("contraseña_usuario")
				Me.Oncontraseña_usuarioChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Categoria")>  _
Partial Public Class Categoria
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_categoria As Integer
	
	Private _nombre_categoria As String
	
	Private _Producto As EntitySet(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_categoriaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_categoriaChanged()
    End Sub
    Partial Private Sub Onnombre_categoriaChanging(value As String)
    End Sub
    Partial Private Sub Onnombre_categoriaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_categoria", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_categoria() As Integer
		Get
			Return Me._id_categoria
		End Get
		Set
			If ((Me._id_categoria = value)  _
						= false) Then
				Me.Onid_categoriaChanging(value)
				Me.SendPropertyChanging
				Me._id_categoria = value
				Me.SendPropertyChanged("id_categoria")
				Me.Onid_categoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre_categoria", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property nombre_categoria() As String
		Get
			Return Me._nombre_categoria
		End Get
		Set
			If (String.Equals(Me._nombre_categoria, value) = false) Then
				Me.Onnombre_categoriaChanging(value)
				Me.SendPropertyChanging
				Me._nombre_categoria = value
				Me.SendPropertyChanged("nombre_categoria")
				Me.Onnombre_categoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Categoria_Producto", Storage:="_Producto", ThisKey:="id_categoria", OtherKey:="id_categoria")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Categoria = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Categoria = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Clientes")>  _
Partial Public Class Clientes
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_cliente As Integer
	
	Private _nombre_cliente As String
	
	Private _direccion_cliente As String
	
	Private _localidad As String
	
	Private _sexo As String
	
	Private _dni_cliente As String
	
	Private _ruc_cliente As String
	
	Private _telefono_cliente As String
	
	Private _Boleta As EntitySet(Of Boleta)
	
	Private _OrdenPedido As EntitySet(Of OrdenPedido)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_clienteChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_clienteChanged()
    End Sub
    Partial Private Sub Onnombre_clienteChanging(value As String)
    End Sub
    Partial Private Sub Onnombre_clienteChanged()
    End Sub
    Partial Private Sub Ondireccion_clienteChanging(value As String)
    End Sub
    Partial Private Sub Ondireccion_clienteChanged()
    End Sub
    Partial Private Sub Onlocalidad_clienteChanging(value As String)
    End Sub
    Partial Private Sub Onlocalidad_clienteChanged()
    End Sub
    Partial Private Sub OnsexoChanging(value As String)
    End Sub
    Partial Private Sub OnsexoChanged()
    End Sub
    Partial Private Sub Ondni_clienteChanging(value As String)
    End Sub
    Partial Private Sub Ondni_clienteChanged()
    End Sub
    Partial Private Sub Onruc_clienteChanging(value As String)
    End Sub
    Partial Private Sub Onruc_clienteChanged()
    End Sub
    Partial Private Sub Ontelefono_clienteChanging(value As String)
    End Sub
    Partial Private Sub Ontelefono_clienteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Boleta = New EntitySet(Of Boleta)(AddressOf Me.attach_Boleta, AddressOf Me.detach_Boleta)
		Me._OrdenPedido = New EntitySet(Of OrdenPedido)(AddressOf Me.attach_OrdenPedido, AddressOf Me.detach_OrdenPedido)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_cliente", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_cliente() As Integer
		Get
			Return Me._id_cliente
		End Get
		Set
			If ((Me._id_cliente = value)  _
						= false) Then
				Me.Onid_clienteChanging(value)
				Me.SendPropertyChanging
				Me._id_cliente = value
				Me.SendPropertyChanged("id_cliente")
				Me.Onid_clienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre_cliente", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property nombre_cliente() As String
		Get
			Return Me._nombre_cliente
		End Get
		Set
			If (String.Equals(Me._nombre_cliente, value) = false) Then
				Me.Onnombre_clienteChanging(value)
				Me.SendPropertyChanging
				Me._nombre_cliente = value
				Me.SendPropertyChanged("nombre_cliente")
				Me.Onnombre_clienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_direccion_cliente", DbType:="VarChar(40)")>  _
	Public Property direccion_cliente() As String
		Get
			Return Me._direccion_cliente
		End Get
		Set
			If (String.Equals(Me._direccion_cliente, value) = false) Then
				Me.Ondireccion_clienteChanging(value)
				Me.SendPropertyChanging
				Me._direccion_cliente = value
				Me.SendPropertyChanged("direccion_cliente")
				Me.Ondireccion_clienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_localidad", DbType:="VarChar(20)")>  _
	Public Property localidad_cliente() As String
		Get
			Return Me._localidad
		End Get
		Set
			If (String.Equals(Me._localidad, value) = false) Then
				Me.Onlocalidad_clienteChanging(value)
				Me.SendPropertyChanging
				Me._localidad = value
				Me.SendPropertyChanged("localidad_cliente")
				Me.Onlocalidad_clienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sexo", DbType:="VarChar(10) NULL", CanBeNull:=false)>  _
	Public Property sexo() As String
		Get
			Return Me._sexo
		End Get
		Set
			If (String.Equals(Me._sexo, value) = false) Then
				Me.OnsexoChanging(value)
				Me.SendPropertyChanging
				Me._sexo = value
				Me.SendPropertyChanged("sexo")
				Me.OnsexoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dni_cliente", DbType:="VarChar(10)")>  _
	Public Property dni_cliente() As String
		Get
			Return Me._dni_cliente
		End Get
		Set
			If (String.Equals(Me._dni_cliente, value) = false) Then
				Me.Ondni_clienteChanging(value)
				Me.SendPropertyChanging
				Me._dni_cliente = value
				Me.SendPropertyChanged("dni_cliente")
				Me.Ondni_clienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ruc_cliente", DbType:="VarChar(10)")>  _
	Public Property ruc_cliente() As String
		Get
			Return Me._ruc_cliente
		End Get
		Set
			If (String.Equals(Me._ruc_cliente, value) = false) Then
				Me.Onruc_clienteChanging(value)
				Me.SendPropertyChanging
				Me._ruc_cliente = value
				Me.SendPropertyChanged("ruc_cliente")
				Me.Onruc_clienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_telefono_cliente", DbType:="VarChar(10)")>  _
	Public Property telefono_cliente() As String
		Get
			Return Me._telefono_cliente
		End Get
		Set
			If (String.Equals(Me._telefono_cliente, value) = false) Then
				Me.Ontelefono_clienteChanging(value)
				Me.SendPropertyChanging
				Me._telefono_cliente = value
				Me.SendPropertyChanged("telefono_cliente")
				Me.Ontelefono_clienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Clientes_Boleta", Storage:="_Boleta", ThisKey:="id_cliente", OtherKey:="id_cliente")>  _
	Public Property Boleta() As EntitySet(Of Boleta)
		Get
			Return Me._Boleta
		End Get
		Set
			Me._Boleta.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Clientes_OrdenPedido", Storage:="_OrdenPedido", ThisKey:="id_cliente", OtherKey:="id_cliente")>  _
	Public Property OrdenPedido() As EntitySet(Of OrdenPedido)
		Get
			Return Me._OrdenPedido
		End Get
		Set
			Me._OrdenPedido.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Boleta(ByVal entity As Boleta)
		Me.SendPropertyChanging
		entity.Clientes = Me
	End Sub
	
	Private Sub detach_Boleta(ByVal entity As Boleta)
		Me.SendPropertyChanging
		entity.Clientes = Nothing
	End Sub
	
	Private Sub attach_OrdenPedido(ByVal entity As OrdenPedido)
		Me.SendPropertyChanging
		entity.Clientes = Me
	End Sub
	
	Private Sub detach_OrdenPedido(ByVal entity As OrdenPedido)
		Me.SendPropertyChanging
		entity.Clientes = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DetalleOrdenPedido")>  _
Partial Public Class DetalleOrdenPedido
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_detalle_orden_pedido As Integer
	
	Private _id_producto As Integer
	
	Private _cantidad As String
	
	Private _precio_venta As String
	
	Private _importe As String
	
	Private _id_orden_pedido As System.Nullable(Of Integer)
	
	Private _OrdenPedido As EntityRef(Of OrdenPedido)
	
	Private _Producto As EntityRef(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_detalle_orden_pedidoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_detalle_orden_pedidoChanged()
    End Sub
    Partial Private Sub Onid_productoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_productoChanged()
    End Sub
    Partial Private Sub OncantidadChanging(value As String)
    End Sub
    Partial Private Sub OncantidadChanged()
    End Sub
    Partial Private Sub Onprecio_ventaChanging(value As String)
    End Sub
    Partial Private Sub Onprecio_ventaChanged()
    End Sub
    Partial Private Sub OnimporteChanging(value As String)
    End Sub
    Partial Private Sub OnimporteChanged()
    End Sub
    Partial Private Sub Onid_orden_pedidoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_orden_pedidoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OrdenPedido = CType(Nothing, EntityRef(Of OrdenPedido))
		Me._Producto = CType(Nothing, EntityRef(Of Producto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_detalle_orden_pedido", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_detalle_orden_pedido() As Integer
		Get
			Return Me._id_detalle_orden_pedido
		End Get
		Set
			If ((Me._id_detalle_orden_pedido = value)  _
						= false) Then
				Me.Onid_detalle_orden_pedidoChanging(value)
				Me.SendPropertyChanging
				Me._id_detalle_orden_pedido = value
				Me.SendPropertyChanged("id_detalle_orden_pedido")
				Me.Onid_detalle_orden_pedidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_producto", DbType:="Int NOT NULL")>  _
	Public Property id_producto() As Integer
		Get
			Return Me._id_producto
		End Get
		Set
			If ((Me._id_producto = value)  _
						= false) Then
				If Me._Producto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_productoChanging(value)
				Me.SendPropertyChanging
				Me._id_producto = value
				Me.SendPropertyChanged("id_producto")
				Me.Onid_productoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cantidad", DbType:="VarChar(10)")>  _
	Public Property cantidad() As String
		Get
			Return Me._cantidad
		End Get
		Set
			If (String.Equals(Me._cantidad, value) = false) Then
				Me.OncantidadChanging(value)
				Me.SendPropertyChanging
				Me._cantidad = value
				Me.SendPropertyChanged("cantidad")
				Me.OncantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_precio_venta", DbType:="VarChar(10)")>  _
	Public Property precio_venta() As String
		Get
			Return Me._precio_venta
		End Get
		Set
			If (String.Equals(Me._precio_venta, value) = false) Then
				Me.Onprecio_ventaChanging(value)
				Me.SendPropertyChanging
				Me._precio_venta = value
				Me.SendPropertyChanged("precio_venta")
				Me.Onprecio_ventaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_importe", DbType:="VarChar(10)")>  _
	Public Property importe() As String
		Get
			Return Me._importe
		End Get
		Set
			If (String.Equals(Me._importe, value) = false) Then
				Me.OnimporteChanging(value)
				Me.SendPropertyChanging
				Me._importe = value
				Me.SendPropertyChanged("importe")
				Me.OnimporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_orden_pedido", DbType:="Int")>  _
	Public Property id_orden_pedido() As System.Nullable(Of Integer)
		Get
			Return Me._id_orden_pedido
		End Get
		Set
			If (Me._id_orden_pedido.Equals(value) = false) Then
				If Me._OrdenPedido.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_orden_pedidoChanging(value)
				Me.SendPropertyChanging
				Me._id_orden_pedido = value
				Me.SendPropertyChanged("id_orden_pedido")
				Me.Onid_orden_pedidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OrdenPedido_DetalleOrdenPedido", Storage:="_OrdenPedido", ThisKey:="id_orden_pedido", OtherKey:="id_orden_pedido", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property OrdenPedido() As OrdenPedido
		Get
			Return Me._OrdenPedido.Entity
		End Get
		Set
			Dim previousValue As OrdenPedido = Me._OrdenPedido.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OrdenPedido.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OrdenPedido.Entity = Nothing
					previousValue.DetalleOrdenPedido.Remove(Me)
				End If
				Me._OrdenPedido.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DetalleOrdenPedido.Add(Me)
					Me._id_orden_pedido = value.id_orden_pedido
				Else
					Me._id_orden_pedido = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("OrdenPedido")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_DetalleOrdenPedido", Storage:="_Producto", ThisKey:="id_producto", OtherKey:="id_producto", IsForeignKey:=true)>  _
	Public Property Producto() As Producto
		Get
			Return Me._Producto.Entity
		End Get
		Set
			Dim previousValue As Producto = Me._Producto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Producto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Producto.Entity = Nothing
					previousValue.DetalleOrdenPedido.Remove(Me)
				End If
				Me._Producto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DetalleOrdenPedido.Add(Me)
					Me._id_producto = value.id_producto
				Else
					Me._id_producto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Producto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Empleado")>  _
Partial Public Class Empleado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_empleado As Integer
	
	Private _nombre_empleado As String
	
	Private _direccion_empleado As String
	
	Private _localidad As String
	
	Private _cargo_empleado As String
	
	Private _edad As String
	
	Private _telefono_empleado As String
	
	Private _fecha_ingreso As Date
	
	Private _Boleta As EntitySet(Of Boleta)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_empleadoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_empleadoChanged()
    End Sub
    Partial Private Sub Onnombre_empleadoChanging(value As String)
    End Sub
    Partial Private Sub Onnombre_empleadoChanged()
    End Sub
    Partial Private Sub Ondireccion_empleadoChanging(value As String)
    End Sub
    Partial Private Sub Ondireccion_empleadoChanged()
    End Sub
    Partial Private Sub Onlocalidad_empleadoChanging(value As String)
    End Sub
    Partial Private Sub Onlocalidad_empleadoChanged()
    End Sub
    Partial Private Sub Oncargo_empleadoChanging(value As String)
    End Sub
    Partial Private Sub Oncargo_empleadoChanged()
    End Sub
    Partial Private Sub OnedadChanging(value As String)
    End Sub
    Partial Private Sub OnedadChanged()
    End Sub
    Partial Private Sub Ontelefono_empleadoChanging(value As String)
    End Sub
    Partial Private Sub Ontelefono_empleadoChanged()
    End Sub
    Partial Private Sub Onfecha_ingresoChanging(value As Date)
    End Sub
    Partial Private Sub Onfecha_ingresoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Boleta = New EntitySet(Of Boleta)(AddressOf Me.attach_Boleta, AddressOf Me.detach_Boleta)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_empleado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_empleado() As Integer
		Get
			Return Me._id_empleado
		End Get
		Set
			If ((Me._id_empleado = value)  _
						= false) Then
				Me.Onid_empleadoChanging(value)
				Me.SendPropertyChanging
				Me._id_empleado = value
				Me.SendPropertyChanged("id_empleado")
				Me.Onid_empleadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre_empleado", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property nombre_empleado() As String
		Get
			Return Me._nombre_empleado
		End Get
		Set
			If (String.Equals(Me._nombre_empleado, value) = false) Then
				Me.Onnombre_empleadoChanging(value)
				Me.SendPropertyChanging
				Me._nombre_empleado = value
				Me.SendPropertyChanged("nombre_empleado")
				Me.Onnombre_empleadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_direccion_empleado", DbType:="VarChar(40)")>  _
	Public Property direccion_empleado() As String
		Get
			Return Me._direccion_empleado
		End Get
		Set
			If (String.Equals(Me._direccion_empleado, value) = false) Then
				Me.Ondireccion_empleadoChanging(value)
				Me.SendPropertyChanging
				Me._direccion_empleado = value
				Me.SendPropertyChanged("direccion_empleado")
				Me.Ondireccion_empleadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_localidad", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property localidad_empleado() As String
		Get
			Return Me._localidad
		End Get
		Set
			If (String.Equals(Me._localidad, value) = false) Then
				Me.Onlocalidad_empleadoChanging(value)
				Me.SendPropertyChanging
				Me._localidad = value
				Me.SendPropertyChanged("localidad_empleado")
				Me.Onlocalidad_empleadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cargo_empleado", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property cargo_empleado() As String
		Get
			Return Me._cargo_empleado
		End Get
		Set
			If (String.Equals(Me._cargo_empleado, value) = false) Then
				Me.Oncargo_empleadoChanging(value)
				Me.SendPropertyChanging
				Me._cargo_empleado = value
				Me.SendPropertyChanged("cargo_empleado")
				Me.Oncargo_empleadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_edad", DbType:="VarChar(3)")>  _
	Public Property edad() As String
		Get
			Return Me._edad
		End Get
		Set
			If (String.Equals(Me._edad, value) = false) Then
				Me.OnedadChanging(value)
				Me.SendPropertyChanging
				Me._edad = value
				Me.SendPropertyChanged("edad")
				Me.OnedadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_telefono_empleado", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property telefono_empleado() As String
		Get
			Return Me._telefono_empleado
		End Get
		Set
			If (String.Equals(Me._telefono_empleado, value) = false) Then
				Me.Ontelefono_empleadoChanging(value)
				Me.SendPropertyChanging
				Me._telefono_empleado = value
				Me.SendPropertyChanged("telefono_empleado")
				Me.Ontelefono_empleadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha_ingreso", DbType:="Date NOT NULL")>  _
	Public Property fecha_ingreso() As Date
		Get
			Return Me._fecha_ingreso
		End Get
		Set
			If ((Me._fecha_ingreso = value)  _
						= false) Then
				Me.Onfecha_ingresoChanging(value)
				Me.SendPropertyChanging
				Me._fecha_ingreso = value
				Me.SendPropertyChanged("fecha_ingreso")
				Me.Onfecha_ingresoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Empleado_Boleta", Storage:="_Boleta", ThisKey:="id_empleado", OtherKey:="id_empleado")>  _
	Public Property Boleta() As EntitySet(Of Boleta)
		Get
			Return Me._Boleta
		End Get
		Set
			Me._Boleta.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Boleta(ByVal entity As Boleta)
		Me.SendPropertyChanging
		entity.Empleado = Me
	End Sub
	
	Private Sub detach_Boleta(ByVal entity As Boleta)
		Me.SendPropertyChanging
		entity.Empleado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OrdenPedido")>  _
Partial Public Class OrdenPedido
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_orden_pedido As Integer
	
	Private _fecha_pedido As Date
	
	Private _id_cliente As System.Nullable(Of Integer)
	
	Private _id_empleado As System.Nullable(Of Integer)
	
	Private _tipo_pago As String
	
	Private _total As String
	
	Private _DetalleOrdenPedido As EntitySet(Of DetalleOrdenPedido)
	
	Private _Clientes As EntityRef(Of Clientes)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_orden_pedidoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_orden_pedidoChanged()
    End Sub
    Partial Private Sub Onfecha_pedidoChanging(value As Date)
    End Sub
    Partial Private Sub Onfecha_pedidoChanged()
    End Sub
    Partial Private Sub Onid_clienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_clienteChanged()
    End Sub
    Partial Private Sub Onid_empleadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_empleadoChanged()
    End Sub
    Partial Private Sub Ontipo_pagoChanging(value As String)
    End Sub
    Partial Private Sub Ontipo_pagoChanged()
    End Sub
    Partial Private Sub OntotalChanging(value As String)
    End Sub
    Partial Private Sub OntotalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DetalleOrdenPedido = New EntitySet(Of DetalleOrdenPedido)(AddressOf Me.attach_DetalleOrdenPedido, AddressOf Me.detach_DetalleOrdenPedido)
		Me._Clientes = CType(Nothing, EntityRef(Of Clientes))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_orden_pedido", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_orden_pedido() As Integer
		Get
			Return Me._id_orden_pedido
		End Get
		Set
			If ((Me._id_orden_pedido = value)  _
						= false) Then
				Me.Onid_orden_pedidoChanging(value)
				Me.SendPropertyChanging
				Me._id_orden_pedido = value
				Me.SendPropertyChanged("id_orden_pedido")
				Me.Onid_orden_pedidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha_pedido", DbType:="Date NOT NULL")>  _
	Public Property fecha_pedido() As Date
		Get
			Return Me._fecha_pedido
		End Get
		Set
			If ((Me._fecha_pedido = value)  _
						= false) Then
				Me.Onfecha_pedidoChanging(value)
				Me.SendPropertyChanging
				Me._fecha_pedido = value
				Me.SendPropertyChanged("fecha_pedido")
				Me.Onfecha_pedidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_cliente", DbType:="Int")>  _
	Public Property id_cliente() As System.Nullable(Of Integer)
		Get
			Return Me._id_cliente
		End Get
		Set
			If (Me._id_cliente.Equals(value) = false) Then
				If Me._Clientes.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_clienteChanging(value)
				Me.SendPropertyChanging
				Me._id_cliente = value
				Me.SendPropertyChanged("id_cliente")
				Me.Onid_clienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_empleado", DbType:="Int")>  _
	Public Property id_empleado() As System.Nullable(Of Integer)
		Get
			Return Me._id_empleado
		End Get
		Set
			If (Me._id_empleado.Equals(value) = false) Then
				Me.Onid_empleadoChanging(value)
				Me.SendPropertyChanging
				Me._id_empleado = value
				Me.SendPropertyChanged("id_empleado")
				Me.Onid_empleadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_pago", DbType:="VarChar(20)")>  _
	Public Property tipo_pago() As String
		Get
			Return Me._tipo_pago
		End Get
		Set
			If (String.Equals(Me._tipo_pago, value) = false) Then
				Me.Ontipo_pagoChanging(value)
				Me.SendPropertyChanging
				Me._tipo_pago = value
				Me.SendPropertyChanged("tipo_pago")
				Me.Ontipo_pagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total", DbType:="VarChar(20)")>  _
	Public Property total() As String
		Get
			Return Me._total
		End Get
		Set
			If (String.Equals(Me._total, value) = false) Then
				Me.OntotalChanging(value)
				Me.SendPropertyChanging
				Me._total = value
				Me.SendPropertyChanged("total")
				Me.OntotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OrdenPedido_DetalleOrdenPedido", Storage:="_DetalleOrdenPedido", ThisKey:="id_orden_pedido", OtherKey:="id_orden_pedido")>  _
	Public Property DetalleOrdenPedido() As EntitySet(Of DetalleOrdenPedido)
		Get
			Return Me._DetalleOrdenPedido
		End Get
		Set
			Me._DetalleOrdenPedido.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Clientes_OrdenPedido", Storage:="_Clientes", ThisKey:="id_cliente", OtherKey:="id_cliente", IsForeignKey:=true)>  _
	Public Property Clientes() As Clientes
		Get
			Return Me._Clientes.Entity
		End Get
		Set
			Dim previousValue As Clientes = Me._Clientes.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Clientes.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Clientes.Entity = Nothing
					previousValue.OrdenPedido.Remove(Me)
				End If
				Me._Clientes.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrdenPedido.Add(Me)
					Me._id_cliente = value.id_cliente
				Else
					Me._id_cliente = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Clientes")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DetalleOrdenPedido(ByVal entity As DetalleOrdenPedido)
		Me.SendPropertyChanging
		entity.OrdenPedido = Me
	End Sub
	
	Private Sub detach_DetalleOrdenPedido(ByVal entity As DetalleOrdenPedido)
		Me.SendPropertyChanging
		entity.OrdenPedido = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Presentacion")>  _
Partial Public Class Presentacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_presentacion As Integer
	
	Private _nombre_presentacion As String
	
	Private _Producto As EntitySet(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_presentacionChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_presentacionChanged()
    End Sub
    Partial Private Sub Onnombre_presentacionChanging(value As String)
    End Sub
    Partial Private Sub Onnombre_presentacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_presentacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_presentacion() As Integer
		Get
			Return Me._id_presentacion
		End Get
		Set
			If ((Me._id_presentacion = value)  _
						= false) Then
				Me.Onid_presentacionChanging(value)
				Me.SendPropertyChanging
				Me._id_presentacion = value
				Me.SendPropertyChanged("id_presentacion")
				Me.Onid_presentacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre_presentacion", DbType:="VarChar(50)")>  _
	Public Property nombre_presentacion() As String
		Get
			Return Me._nombre_presentacion
		End Get
		Set
			If (String.Equals(Me._nombre_presentacion, value) = false) Then
				Me.Onnombre_presentacionChanging(value)
				Me.SendPropertyChanging
				Me._nombre_presentacion = value
				Me.SendPropertyChanged("nombre_presentacion")
				Me.Onnombre_presentacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Presentacion_Producto", Storage:="_Producto", ThisKey:="id_presentacion", OtherKey:="id_categoria")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Presentacion = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Presentacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Producto")>  _
Partial Public Class Producto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_producto As Integer
	
	Private _nombre_producto As String
	
	Private _precio_venta As String
	
	Private _precio_compra As String
	
	Private _fecha_vencimiento As Date
	
	Private _stock As Integer
	
	Private _id_categoria As Integer
	
	Private _id_proveedor As System.Nullable(Of Integer)
	
	Private _id_presentacion As System.Nullable(Of Integer)
	
	Private _DetalleOrdenPedido As EntitySet(Of DetalleOrdenPedido)
	
	Private _Categoria As EntityRef(Of Categoria)
	
	Private _Presentacion As EntityRef(Of Presentacion)
	
	Private _Proveedor As EntityRef(Of Proveedor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_productoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_productoChanged()
    End Sub
    Partial Private Sub Onnombre_productoChanging(value As String)
    End Sub
    Partial Private Sub Onnombre_productoChanged()
    End Sub
    Partial Private Sub Onprecio_ventaChanging(value As String)
    End Sub
    Partial Private Sub Onprecio_ventaChanged()
    End Sub
    Partial Private Sub Onprecio_compraChanging(value As String)
    End Sub
    Partial Private Sub Onprecio_compraChanged()
    End Sub
    Partial Private Sub Onfecha_vencimientoChanging(value As Date)
    End Sub
    Partial Private Sub Onfecha_vencimientoChanged()
    End Sub
    Partial Private Sub OnstockChanging(value As Integer)
    End Sub
    Partial Private Sub OnstockChanged()
    End Sub
    Partial Private Sub Onid_categoriaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_categoriaChanged()
    End Sub
    Partial Private Sub Onid_proveedorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_proveedorChanged()
    End Sub
    Partial Private Sub Onid_presentacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_presentacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DetalleOrdenPedido = New EntitySet(Of DetalleOrdenPedido)(AddressOf Me.attach_DetalleOrdenPedido, AddressOf Me.detach_DetalleOrdenPedido)
		Me._Categoria = CType(Nothing, EntityRef(Of Categoria))
		Me._Presentacion = CType(Nothing, EntityRef(Of Presentacion))
		Me._Proveedor = CType(Nothing, EntityRef(Of Proveedor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_producto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_producto() As Integer
		Get
			Return Me._id_producto
		End Get
		Set
			If ((Me._id_producto = value)  _
						= false) Then
				Me.Onid_productoChanging(value)
				Me.SendPropertyChanging
				Me._id_producto = value
				Me.SendPropertyChanged("id_producto")
				Me.Onid_productoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre_producto", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property nombre_producto() As String
		Get
			Return Me._nombre_producto
		End Get
		Set
			If (String.Equals(Me._nombre_producto, value) = false) Then
				Me.Onnombre_productoChanging(value)
				Me.SendPropertyChanging
				Me._nombre_producto = value
				Me.SendPropertyChanged("nombre_producto")
				Me.Onnombre_productoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_precio_venta", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property precio_venta() As String
		Get
			Return Me._precio_venta
		End Get
		Set
			If (String.Equals(Me._precio_venta, value) = false) Then
				Me.Onprecio_ventaChanging(value)
				Me.SendPropertyChanging
				Me._precio_venta = value
				Me.SendPropertyChanged("precio_venta")
				Me.Onprecio_ventaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_precio_compra", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property precio_compra() As String
		Get
			Return Me._precio_compra
		End Get
		Set
			If (String.Equals(Me._precio_compra, value) = false) Then
				Me.Onprecio_compraChanging(value)
				Me.SendPropertyChanging
				Me._precio_compra = value
				Me.SendPropertyChanged("precio_compra")
				Me.Onprecio_compraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha_vencimiento", DbType:="Date NOT NULL")>  _
	Public Property fecha_vencimiento() As Date
		Get
			Return Me._fecha_vencimiento
		End Get
		Set
			If ((Me._fecha_vencimiento = value)  _
						= false) Then
				Me.Onfecha_vencimientoChanging(value)
				Me.SendPropertyChanging
				Me._fecha_vencimiento = value
				Me.SendPropertyChanged("fecha_vencimiento")
				Me.Onfecha_vencimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stock", DbType:="Int NOT NULL")>  _
	Public Property stock() As Integer
		Get
			Return Me._stock
		End Get
		Set
			If ((Me._stock = value)  _
						= false) Then
				Me.OnstockChanging(value)
				Me.SendPropertyChanging
				Me._stock = value
				Me.SendPropertyChanged("stock")
				Me.OnstockChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_categoria", DbType:="Int NOT NULL")>  _
	Public Property id_categoria() As Integer
		Get
			Return Me._id_categoria
		End Get
		Set
			If ((Me._id_categoria = value)  _
						= false) Then
				If (Me._Categoria.HasLoadedOrAssignedValue OrElse Me._Presentacion.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_categoriaChanging(value)
				Me.SendPropertyChanging
				Me._id_categoria = value
				Me.SendPropertyChanged("id_categoria")
				Me.Onid_categoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_proveedor", DbType:="Int")>  _
	Public Property id_proveedor() As System.Nullable(Of Integer)
		Get
			Return Me._id_proveedor
		End Get
		Set
			If (Me._id_proveedor.Equals(value) = false) Then
				If Me._Proveedor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_proveedorChanging(value)
				Me.SendPropertyChanging
				Me._id_proveedor = value
				Me.SendPropertyChanged("id_proveedor")
				Me.Onid_proveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_presentacion", DbType:="Int")>  _
	Public Property id_presentacion() As System.Nullable(Of Integer)
		Get
			Return Me._id_presentacion
		End Get
		Set
			If (Me._id_presentacion.Equals(value) = false) Then
				Me.Onid_presentacionChanging(value)
				Me.SendPropertyChanging
				Me._id_presentacion = value
				Me.SendPropertyChanged("id_presentacion")
				Me.Onid_presentacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Producto_DetalleOrdenPedido", Storage:="_DetalleOrdenPedido", ThisKey:="id_producto", OtherKey:="id_producto")>  _
	Public Property DetalleOrdenPedido() As EntitySet(Of DetalleOrdenPedido)
		Get
			Return Me._DetalleOrdenPedido
		End Get
		Set
			Me._DetalleOrdenPedido.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Categoria_Producto", Storage:="_Categoria", ThisKey:="id_categoria", OtherKey:="id_categoria", IsForeignKey:=true)>  _
	Public Property Categoria() As Categoria
		Get
			Return Me._Categoria.Entity
		End Get
		Set
			Dim previousValue As Categoria = Me._Categoria.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Categoria.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Categoria.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Categoria.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._id_categoria = value.id_categoria
				Else
					Me._id_categoria = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Categoria")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Presentacion_Producto", Storage:="_Presentacion", ThisKey:="id_categoria", OtherKey:="id_presentacion", IsForeignKey:=true)>  _
	Public Property Presentacion() As Presentacion
		Get
			Return Me._Presentacion.Entity
		End Get
		Set
			Dim previousValue As Presentacion = Me._Presentacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Presentacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Presentacion.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Presentacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._id_categoria = value.id_presentacion
				Else
					Me._id_categoria = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Presentacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Producto", Storage:="_Proveedor", ThisKey:="id_proveedor", OtherKey:="id_proveedor", IsForeignKey:=true)>  _
	Public Property Proveedor() As Proveedor
		Get
			Return Me._Proveedor.Entity
		End Get
		Set
			Dim previousValue As Proveedor = Me._Proveedor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Proveedor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Proveedor.Entity = Nothing
					previousValue.Producto.Remove(Me)
				End If
				Me._Proveedor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Producto.Add(Me)
					Me._id_proveedor = value.id_proveedor
				Else
					Me._id_proveedor = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Proveedor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DetalleOrdenPedido(ByVal entity As DetalleOrdenPedido)
		Me.SendPropertyChanging
		entity.Producto = Me
	End Sub
	
	Private Sub detach_DetalleOrdenPedido(ByVal entity As DetalleOrdenPedido)
		Me.SendPropertyChanging
		entity.Producto = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Proveedor")>  _
Partial Public Class Proveedor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_proveedor As Integer
	
	Private _nombre_proveedor As String
	
	Private _direccion_proveedor As String
	
	Private _telefono As String
	
	Private _localidad As String
	
	Private _Producto As EntitySet(Of Producto)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_proveedorChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_proveedorChanged()
    End Sub
    Partial Private Sub Onnombre_proveedorChanging(value As String)
    End Sub
    Partial Private Sub Onnombre_proveedorChanged()
    End Sub
    Partial Private Sub Ondireccion_proveedorChanging(value As String)
    End Sub
    Partial Private Sub Ondireccion_proveedorChanged()
    End Sub
    Partial Private Sub Ontelefono_proveedorChanging(value As String)
    End Sub
    Partial Private Sub Ontelefono_proveedorChanged()
    End Sub
    Partial Private Sub Onlocalidad_proveedorChanging(value As String)
    End Sub
    Partial Private Sub Onlocalidad_proveedorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Producto = New EntitySet(Of Producto)(AddressOf Me.attach_Producto, AddressOf Me.detach_Producto)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_proveedor", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_proveedor() As Integer
		Get
			Return Me._id_proveedor
		End Get
		Set
			If ((Me._id_proveedor = value)  _
						= false) Then
				Me.Onid_proveedorChanging(value)
				Me.SendPropertyChanging
				Me._id_proveedor = value
				Me.SendPropertyChanged("id_proveedor")
				Me.Onid_proveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre_proveedor", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property nombre_proveedor() As String
		Get
			Return Me._nombre_proveedor
		End Get
		Set
			If (String.Equals(Me._nombre_proveedor, value) = false) Then
				Me.Onnombre_proveedorChanging(value)
				Me.SendPropertyChanging
				Me._nombre_proveedor = value
				Me.SendPropertyChanged("nombre_proveedor")
				Me.Onnombre_proveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_direccion_proveedor", DbType:="VarChar(50)")>  _
	Public Property direccion_proveedor() As String
		Get
			Return Me._direccion_proveedor
		End Get
		Set
			If (String.Equals(Me._direccion_proveedor, value) = false) Then
				Me.Ondireccion_proveedorChanging(value)
				Me.SendPropertyChanging
				Me._direccion_proveedor = value
				Me.SendPropertyChanged("direccion_proveedor")
				Me.Ondireccion_proveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_telefono", DbType:="VarChar(10)")>  _
	Public Property telefono_proveedor() As String
		Get
			Return Me._telefono
		End Get
		Set
			If (String.Equals(Me._telefono, value) = false) Then
				Me.Ontelefono_proveedorChanging(value)
				Me.SendPropertyChanging
				Me._telefono = value
				Me.SendPropertyChanged("telefono_proveedor")
				Me.Ontelefono_proveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_localidad", DbType:="VarChar(20)")>  _
	Public Property localidad_proveedor() As String
		Get
			Return Me._localidad
		End Get
		Set
			If (String.Equals(Me._localidad, value) = false) Then
				Me.Onlocalidad_proveedorChanging(value)
				Me.SendPropertyChanging
				Me._localidad = value
				Me.SendPropertyChanged("localidad_proveedor")
				Me.Onlocalidad_proveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Proveedor_Producto", Storage:="_Producto", ThisKey:="id_proveedor", OtherKey:="id_proveedor")>  _
	Public Property Producto() As EntitySet(Of Producto)
		Get
			Return Me._Producto
		End Get
		Set
			Me._Producto.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Proveedor = Me
	End Sub
	
	Private Sub detach_Producto(ByVal entity As Producto)
		Me.SendPropertyChanging
		entity.Proveedor = Nothing
	End Sub
End Class
